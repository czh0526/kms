// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/czh0526/kms/store/db/model"
)

func newKeyPair(db *gorm.DB, opts ...gen.DOOption) keyPair {
	_keyPair := keyPair{}

	_keyPair.keyPairDo.UseDB(db, opts...)
	_keyPair.keyPairDo.UseModel(&model.KeyPair{})

	tableName := _keyPair.keyPairDo.TableName()
	_keyPair.ALL = field.NewAsterisk(tableName)
	_keyPair.Address = field.NewString(tableName, "address")
	_keyPair.PrivateKey = field.NewString(tableName, "private_key")
	_keyPair.PublicKey = field.NewString(tableName, "public_key")

	_keyPair.fillFieldMap()

	return _keyPair
}

type keyPair struct {
	keyPairDo keyPairDo

	ALL        field.Asterisk
	Address    field.String
	PrivateKey field.String
	PublicKey  field.String

	fieldMap map[string]field.Expr
}

func (k keyPair) Table(newTableName string) *keyPair {
	k.keyPairDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k keyPair) As(alias string) *keyPair {
	k.keyPairDo.DO = *(k.keyPairDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *keyPair) updateTableName(table string) *keyPair {
	k.ALL = field.NewAsterisk(table)
	k.Address = field.NewString(table, "address")
	k.PrivateKey = field.NewString(table, "private_key")
	k.PublicKey = field.NewString(table, "public_key")

	k.fillFieldMap()

	return k
}

func (k *keyPair) WithContext(ctx context.Context) *keyPairDo { return k.keyPairDo.WithContext(ctx) }

func (k keyPair) TableName() string { return k.keyPairDo.TableName() }

func (k keyPair) Alias() string { return k.keyPairDo.Alias() }

func (k keyPair) Columns(cols ...field.Expr) gen.Columns { return k.keyPairDo.Columns(cols...) }

func (k *keyPair) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *keyPair) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 3)
	k.fieldMap["address"] = k.Address
	k.fieldMap["private_key"] = k.PrivateKey
	k.fieldMap["public_key"] = k.PublicKey
}

func (k keyPair) clone(db *gorm.DB) keyPair {
	k.keyPairDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k keyPair) replaceDB(db *gorm.DB) keyPair {
	k.keyPairDo.ReplaceDB(db)
	return k
}

type keyPairDo struct{ gen.DO }

func (k keyPairDo) Debug() *keyPairDo {
	return k.withDO(k.DO.Debug())
}

func (k keyPairDo) WithContext(ctx context.Context) *keyPairDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k keyPairDo) ReadDB() *keyPairDo {
	return k.Clauses(dbresolver.Read)
}

func (k keyPairDo) WriteDB() *keyPairDo {
	return k.Clauses(dbresolver.Write)
}

func (k keyPairDo) Session(config *gorm.Session) *keyPairDo {
	return k.withDO(k.DO.Session(config))
}

func (k keyPairDo) Clauses(conds ...clause.Expression) *keyPairDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k keyPairDo) Returning(value interface{}, columns ...string) *keyPairDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k keyPairDo) Not(conds ...gen.Condition) *keyPairDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k keyPairDo) Or(conds ...gen.Condition) *keyPairDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k keyPairDo) Select(conds ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k keyPairDo) Where(conds ...gen.Condition) *keyPairDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k keyPairDo) Order(conds ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k keyPairDo) Distinct(cols ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k keyPairDo) Omit(cols ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k keyPairDo) Join(table schema.Tabler, on ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k keyPairDo) LeftJoin(table schema.Tabler, on ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k keyPairDo) RightJoin(table schema.Tabler, on ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k keyPairDo) Group(cols ...field.Expr) *keyPairDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k keyPairDo) Having(conds ...gen.Condition) *keyPairDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k keyPairDo) Limit(limit int) *keyPairDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k keyPairDo) Offset(offset int) *keyPairDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k keyPairDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *keyPairDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k keyPairDo) Unscoped() *keyPairDo {
	return k.withDO(k.DO.Unscoped())
}

func (k keyPairDo) Create(values ...*model.KeyPair) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k keyPairDo) CreateInBatches(values []*model.KeyPair, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k keyPairDo) Save(values ...*model.KeyPair) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k keyPairDo) First() (*model.KeyPair, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyPair), nil
	}
}

func (k keyPairDo) Take() (*model.KeyPair, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyPair), nil
	}
}

func (k keyPairDo) Last() (*model.KeyPair, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyPair), nil
	}
}

func (k keyPairDo) Find() ([]*model.KeyPair, error) {
	result, err := k.DO.Find()
	return result.([]*model.KeyPair), err
}

func (k keyPairDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KeyPair, err error) {
	buf := make([]*model.KeyPair, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k keyPairDo) FindInBatches(result *[]*model.KeyPair, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k keyPairDo) Attrs(attrs ...field.AssignExpr) *keyPairDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k keyPairDo) Assign(attrs ...field.AssignExpr) *keyPairDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k keyPairDo) Joins(fields ...field.RelationField) *keyPairDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k keyPairDo) Preload(fields ...field.RelationField) *keyPairDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k keyPairDo) FirstOrInit() (*model.KeyPair, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyPair), nil
	}
}

func (k keyPairDo) FirstOrCreate() (*model.KeyPair, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyPair), nil
	}
}

func (k keyPairDo) FindByPage(offset int, limit int) (result []*model.KeyPair, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k keyPairDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k keyPairDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k keyPairDo) Delete(models ...*model.KeyPair) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *keyPairDo) withDO(do gen.Dao) *keyPairDo {
	k.DO = *do.(*gen.DO)
	return k
}
